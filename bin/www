#!/usr/bin/env node
const mongoose = require('mongoose');
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mvc:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '2000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const uri = 'mongodb+srv://phuchng0612:VzYXbzn8SzZdEv5n@cluster0.q010e.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';

mongoose
  .connect(uri)
  .then(() => console.log('Connected to MongoDB Atlas'))
  .catch((error) => console.error('Error connecting to MongoDB Atlas:', error));

const Product = require('../models/Product');
const Account = require('../models/Account');

async function seedDatabase() {
  try {
    await Product.deleteMany({});
    await Account.deleteMany({});

    const products = [
    // Coffee Products
      {
        name: 'Coffee Cappuccino',
        image: 'menu-1.jpg',
        description: 'A rich and creamy coffee with a frothy top.',
        price: 5.9,
        category: "Coffee",
        servingOptions: ['Small', 'Medium', 'Large'],
      },
      {
        name: 'Coffee Latte',
        image: 'menu-2.jpg',
        description: 'A smooth blend of espresso and steamed milk.',
        price: 5.9,
        category: "Coffee",
        servingOptions: ['Small', 'Medium', 'Large'],
      },
    // Food Products
      {
        name: 'Grilled Beef',
        image: 'dish-1.jpg',
        description: 'Succulent grilled beef cooked to perfection.',
        price: 12.9,
        category: "Food",
        servingOptions: ['Rare', 'Medium', 'Well-done'],
      },

    // Drinks Products
      {
        name: 'Lemonade Juice',
        image: 'drink-1.jpg',
        description: 'Refreshing lemonade made from fresh lemons.',
        price: 2.9,
        category: "Drink",
        servingOptions: ['Medium', 'Large'],
      },
      {
        name: 'Pineapple Juice',
        image: 'drink-2.jpg',
        description: 'Refreshing pineapple juice made from fresh pineapples.',
        price: 2.9,
        category: "Drink",
        servingOptions: ['Medium', 'Large'],
      },
    // Desserts Products
      {
        name: 'Hot Cake Honey',
        image: 'dessert-1.jpg',
        description: 'Delicious hot cakes drizzled with honey.',
        price: 4.9,
        category: "Dessert",
        servingOptions: [],
      },
    ];

    await Product.insertMany(products);
    console.log('Products inserted');

    const accounts = [
      {
        name: 'quocthai',
        password: '123',
        email: 'quocthai290103@gmail.com'
      },
      {
        name: 'thanhnhan',
        password: '456',
        email: 'thanhnhan2003@gmail.com'
      },
    ];

    await Account.insertMany(accounts);
    console.log('Accounts inserted');

    console.log('Database seeded successfully');
  } catch (error) {
    console.error('Error seeding database:', error);
  }
}

seedDatabase();


var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
